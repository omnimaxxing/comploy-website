name: Performance Monitoring

on:
  pull_request:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'public/**'
      - 'next.config.mjs'
      - 'package.json'
      - 'pnpm-lock.yaml'

jobs:
  bundle-analysis:
    name: Bundle Size Analysis
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          
      - name: Setup PNPM
        uses: pnpm/action-setup@v2
        with:
          version: '10'
          run_install: false
          
      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT
          
      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
            
      - name: Install dependencies
        run: pnpm install
        
      - name: Build with bundle analyzer
        run: ANALYZE=true pnpm build
        env:
          NEXT_PUBLIC_SERVER_URL: http://localhost:3000
          PAYLOAD_SECRET: test-secret-for-ci
          DATABASE_URI: mongodb://localhost:27017/test
          
      - name: Upload bundle stats
        uses: actions/upload-artifact@v3
        with:
          name: bundle-stats
          path: .next/analyze
          
  lighthouse:
    name: Lighthouse Performance Check
    runs-on: ubuntu-latest
    needs: bundle-analysis
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          
      - name: Setup PNPM
        uses: pnpm/action-setup@v2
        with:
          version: '10'
          run_install: false
          
      - name: Install dependencies
        run: pnpm install
        
      - name: Build Next.js app
        run: pnpm build
        env:
          NEXT_PUBLIC_SERVER_URL: http://localhost:3000
          PAYLOAD_SECRET: test-secret-for-ci
          DATABASE_URI: mongodb://localhost:27017/test
          
      - name: Start server in background
        run: |
          pnpm start &
          sleep 10
        env:
          NEXT_PUBLIC_SERVER_URL: http://localhost:3000
          PAYLOAD_SECRET: test-secret-for-ci
          DATABASE_URI: mongodb://localhost:27017/test
          
      - name: Run Lighthouse audit
        uses: treosh/lighthouse-ci-action@v9
        with:
          urls: |
            http://localhost:3000
            http://localhost:3000/plugins
          uploadArtifacts: true
          temporaryPublicStorage: true
          configPath: '.github/lighthouse-config.json'
          
      - name: Format lighthouse score
        id: format_lighthouse_score
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const results = JSON.parse(fs.readFileSync('lighthouse-results.json', 'utf8'));
            const comments = [];
            
            for (const [url, urlResults] of Object.entries(results)) {
              const { performance, accessibility, 'best-practices': bestPractices, seo } = urlResults.summary;
              
              comments.push(`## Lighthouse Scores for ${url}\n`);
              comments.push(`| Category | Score |`);
              comments.push(`| --- | --- |`);
              comments.push(`| Performance | ${Math.round(performance * 100)} |`);
              comments.push(`| Accessibility | ${Math.round(accessibility * 100)} |`);
              comments.push(`| Best Practices | ${Math.round(bestPractices * 100)} |`);
              comments.push(`| SEO | ${Math.round(seo * 100)} |`);
              comments.push(``);
            }
            
            core.setOutput('comment', comments.join('\n'));
            
      - name: Comment PR
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { issue: { number: issue_number }, repo: { owner, repo } } = context;
            github.rest.issues.createComment({
              issue_number,
              owner,
              repo,
              body: `${{ steps.format_lighthouse_score.outputs.comment }}`
            });